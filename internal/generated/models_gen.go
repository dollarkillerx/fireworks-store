// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"fmt"
	"io"
	"strconv"
)

type AreaList struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type AuthPayload struct {
	AccessTokenString    string `json:"accessTokenString"`
	NeedBasicInformation bool   `json:"needBasicInformation"`
	ID                   string `json:"id"`
}

type BasicInfo struct {
	NickName string   `json:"nickName"`
	Avatar   string   `json:"avatar"`
	Gps      []string `json:"gps"`
	Phone    string   `json:"phone"`
}

type Captcha struct {
	Img          string `json:"img"`
	CaptchaToken string `json:"captchaToken"`
}

type Commodity struct {
	ID           string  `json:"id"`
	Name         string  `json:"name"`
	UnitPrice    float64 `json:"unitPrice"`
	Weights      float64 `json:"weights"`
	Inventory    int     `json:"inventory"`
	Picture      string  `json:"picture"`
	Describe     string  `json:"describe"`
	Integral     float64 `json:"integral"`
	IbIntegral   float64 `json:"ibIntegral"`
	RebateLeve1  float64 `json:"rebateLeve1"`
	RebateLeve2  float64 `json:"rebateLeve2"`
	RebateLeve3  float64 `json:"rebateLeve3"`
	NumberCopies float64 `json:"numberCopies"`
}

type CommodityList struct {
	Total         int         `json:"Total"`
	Nodes         []Commodity `json:"Nodes"`
	StartDelivery float64     `json:"startDelivery"`
}

type CreateShippingAddress struct {
	School          string `json:"school"`
	ShippingAddress string `json:"shippingAddress"`
	ContactPerson   string `json:"contactPerson"`
	ContactNumber   string `json:"contactNumber"`
	Gender          bool   `json:"gender"`
}

type HistoryOrder struct {
	Total  int     `json:"total"`
	Orders []Order `json:"orders"`
}

type IbRegistry struct {
	CaptchaToken   string `json:"captchaToken"`
	Captcha        string `json:"captcha"`
	Password       string `json:"password"`
	Name           string `json:"name"`
	Remark         string `json:"remark"`
	InvitationCode string `json:"invitationCode"`
}

type MyRebate struct {
	PromoteUsersToday    int     `json:"promoteUsersToday"`
	CommissionToday      float64 `json:"commissionToday"`
	TotalCommission      float64 `json:"totalCommission"`
	HistoricalCommission float64 `json:"historicalCommission"`
}

type Order struct {
	ID              string      `json:"id"`
	ShopLogo        string      `json:"shopLogo"`
	ShopName        string      `json:"shopName"`
	ShopID          string      `json:"shopID"`
	TotalPrice      float64     `json:"totalPrice"`
	Freight         float64     `json:"freight"`
	OrderType       OrderType   `json:"orderType"`
	Remark          string      `json:"remark"`
	Commodities     []Commodity `json:"commodities"`
	CreatedAt       int         `json:"createdAt"`
	ContactPerson   string      `json:"contactPerson"`
	DeliveryAddress string      `json:"deliveryAddress"`
}

type Pagination struct {
	Offset int `json:"offset"`
	Limit  int `json:"limit"`
}

type PlaceOrder struct {
	Token string `json:"token"`
}

type ShippingAddress struct {
	ID              string `json:"id"`
	School          string `json:"school"`
	ShippingAddress string `json:"shippingAddress"`
	ContactPerson   string `json:"contactPerson"`
	ContactNumber   string `json:"contactNumber"`
	Gender          bool   `json:"gender"`
}

type ShippingAddressList struct {
	Total           int               `json:"total"`
	ShippingAddress []ShippingAddress `json:"shippingAddress"`
}

type Shop struct {
	ID            string  `json:"id"`
	Name          string  `json:"name"`
	LogoURI       string  `json:"logoUri"`
	Address       string  `json:"address"`
	Announcement  string  `json:"announcement"`
	Score         string  `json:"score"`
	StartDelivery float64 `json:"startDelivery"`
}

type ShopList struct {
	Total int    `json:"Total"`
	Nodes []Shop `json:"Nodes"`
}

type UserInformation struct {
	UserID string `json:"userID"`
}

type MyIb struct {
	InvitationCode string `json:"invitationCode"`
	UserID         string `json:"userID"`
	Integral       string `json:"integral"`
	AgencyLevel    string `json:"agencyLevel"`
}

type RebateFlow struct {
	Total *int         `json:"total"`
	Nodes []RebateItem `json:"Nodes"`
}

type RebateItem struct {
	ID       string       `json:"id"`
	Amount   float64      `json:"amount"`
	State    WithdrawType `json:"state"`
	Message  string       `json:"message"`
	CreateAt int          `json:"createAt"`
}

type UserFlow struct {
	Total int            `json:"total"`
	Nodes []UserFlowItem `json:"Nodes"`
}

type UserFlowItem struct {
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	Commodity string  `json:"commodity"`
	CreateAt  int     `json:"createAt"`
	Rebate    float64 `json:"rebate"`
	Integral  float64 `json:"integral"`
}

type OrderType string

const (
	OrderTypeToBePaid          OrderType = "ToBePaid"
	OrderTypeCancelled         OrderType = "Cancelled"
	OrderTypePaymentSuccessful OrderType = "PaymentSuccessful"
)

var AllOrderType = []OrderType{
	OrderTypeToBePaid,
	OrderTypeCancelled,
	OrderTypePaymentSuccessful,
}

func (e OrderType) IsValid() bool {
	switch e {
	case OrderTypeToBePaid, OrderTypeCancelled, OrderTypePaymentSuccessful:
		return true
	}
	return false
}

func (e OrderType) String() string {
	return string(e)
}

func (e *OrderType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderType", str)
	}
	return nil
}

func (e OrderType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WithdrawType string

const (
	WithdrawTypeWait    WithdrawType = "Wait"
	WithdrawTypeSuccess WithdrawType = "Success"
	WithdrawTypeFail    WithdrawType = "Fail"
)

var AllWithdrawType = []WithdrawType{
	WithdrawTypeWait,
	WithdrawTypeSuccess,
	WithdrawTypeFail,
}

func (e WithdrawType) IsValid() bool {
	switch e {
	case WithdrawTypeWait, WithdrawTypeSuccess, WithdrawTypeFail:
		return true
	}
	return false
}

func (e WithdrawType) String() string {
	return string(e)
}

func (e *WithdrawType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WithdrawType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WithdrawType", str)
	}
	return nil
}

func (e WithdrawType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
